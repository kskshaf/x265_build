#ã€€base on AmusementClub/x265
name: Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'which tag to upload to'
        default: ''

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        target_cpu:
        - x86-64
        toolchain:
        - clang
    steps:
    - name: Parse matrix
      run: |
        if ("${{matrix.toolchain}}" -eq "clang") {
          echo "MSYSTEM=CLANG64" >> $env:GITHUB_ENV
        } else {
          echo "MSYSTEM=UCRT64" >> $env:GITHUB_ENV
        }
      shell: pwsh
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{env.MSYSTEM}}
        update: true
        install: >-
          p7zip
          base-devel
          mingw-w64-${{matrix.toolchain}}-x86_64-nasm
          mingw-w64-${{matrix.toolchain}}-x86_64-toolchain
          mingw-w64-${{matrix.toolchain}}-x86_64-cmake
          mingw-w64-${{matrix.toolchain}}-x86_64-ninja
    - name: Get rid of .dll.a
      run: find /*64/ /usr/ -type f -name "*.dll.a" -print -delete
    - name: Setup build dir
      run: mkdir -p build/8b build/10b build/12b
    - name: Clone x265
      run: git clone https://github.com/kskshaf/x265_mod.git x265
      shell: powershell {0}
    - name: Compile x265 8bit
      run: |
        cmake -GNinja ../../x265/source -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DTARGET_CPU=${{matrix.target_cpu}} -DUSE_LTO=ON
        ninja
        cp libx265.a ../10b/libx265_8b.a
      working-directory: build/8b
    - name: Compile x265 12bit
      run: |
        cmake -GNinja ../../x265/source -DHIGH_BIT_DEPTH=ON -DMAIN12=ON -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DTARGET_CPU=${{matrix.target_cpu}} -DUSE_LTO=ON
        ninja
        cp libx265.a ../10b/libx265_12b.a
      working-directory: build/12b
    - name: Compile x265 10bit
      working-directory: build
      run: |
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
        cmake_flags="-GNinja ../../x265/source -DEXTRA_LIB=x265_8b.a;x265_12b.a -DEXTRA_LINK_FLAGS=-L. -DLINKED_8BIT=ON -DLINKED_12BIT=ON -DENABLE_HDR10_PLUS=ON -DHIGH_BIT_DEPTH=ON -DENABLE_SHARED=OFF -DTARGET_CPU=${{matrix.target_cpu}} -DUSE_LTO=ON -DCMAKE_EXE_LINKER_FLAGS=-LD:/a/_temp/msys/msys64/usr/local/lib"
        pushd 10b
        cmake $cmake_flags
        ninja
        strip -s x265.exe
        popd
    - name: Package
      run: |
        mkdir dist
        cp ${{env.DLL_DEPS}} build/10b/x265.exe dist
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: x265-win64-${{matrix.target_cpu}}-${{matrix.toolchain}}-full
        path: dist/*

    - name: Compress artifact for release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
      run: |
        cd dist
        # do not release profiling binary
        7za a -t7z -mx=7 ../x265-win64-${{matrix.target_cpu}}-${{matrix.toolchain}}.${{ github.event.inputs.tag }}.7z x265.exe

    - name: Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
      with:
        tag_name: ${{ github.event.inputs.tag }}
        files: x265-win64-${{matrix.target_cpu}}-${{matrix.toolchain}}.${{ github.event.inputs.tag }}.7z
        fail_on_unmatched_files: true
        generate_release_notes: false
        prerelease: true
